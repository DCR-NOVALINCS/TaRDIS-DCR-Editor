// ============================================================================
// EDP Use Case - DCR demo @GA July 2024
// 
// Update: role parameters are no longer restricted to some implicit "id" - we
// now require the explicit declaration of named parameters - it will run as 
// before.
// ============================================================================

P(id:String)
Public
;
Public flows P
;

(consume_1:consume) (Public) [?] [P(id='1') -> P(id='3'), P(id='4')]
(consume_2:consume) (Public) [?] [P(id='2') -> P(id='3'), P(id='4')]

(reply_3_1: reply) (Public) [?] [P(id='3') -> P(id='1')]
(reply_3_2: reply) (Public) [?] [P(id='3') -> P(id='2')]
(reply_4_1: reply) (Public) [?] [P(id='4') -> P(id='1')]
(reply_4_2: reply) (Public) [?] [P(id='4') -> P(id='2')]

(accept_1_3: accept) (Public) [?] [P(id='1') -> P(id='3')]
(reject_1_3: reject) (Public) [?] [P(id='1') -> P(id='3')]

(accept_1_4: accept) (Public) [?] [P(id='1') -> P(id='4')]
(reject_1_4: reject) (Public) [?] [P(id='1') -> P(id='4')]

(accept_2_3: accept) (Public) [?] [P(id='2') -> P(id='3')]
(reject_2_3: accept) (Public) [?] [P(id='2') -> P(id='3')]

(accept_2_4: accept) (Public) [?] [P(id='2') -> P(id='4')]
(reject_2_4: accept) (Public) [?] [P(id='2') -> P(id='4')]
;

//  producers can't reply until they receive a request
consume_1 -->* reply_3_1, reply_4_1
consume_2 -->* reply_3_2, reply_4_2
// //  consumer cannot make a decision without receiving a reply
reply_3_1 -->*  accept_1_3, reject_1_3
reply_4_1 -->*  accept_1_4, reject_1_4
reply_3_2 -->*  accept_2_3
reply_3_2 -->*  accept_2_3, reject_2_3
reply_4_2 -->*  accept_2_4, reject_2_4
// //  consumer must eventually communicate a decision when a reply is received
reply_3_1 *-->  accept_1_3, reject_1_3
reply_4_1 *-->  accept_1_4, reject_1_4
reply_3_2 *-->  accept_2_3, reject_2_3
reply_4_2 *-->  accept_2_4, reject_2_4
// // the consumer's decision regarding each offer is final: once accepted or rejected
// //  - (no do overs, no take backs) neither accept or reject can be executed again for that offer
// //  - (no more offers) the producer behind that offer cannot reply any further
accept_1_3, reject_1_3 -->% accept_1_3, reject_1_3, reply_3_1
accept_1_4, reject_1_4 -->% accept_1_4, reject_1_4, reply_4_1
accept_2_3, reject_2_3 -->% accept_2_3, reject_2_3, reply_3_2
accept_2_4, reject_2_4 -->% accept_2_4, reject_2_4, reply_4_2